---
# Source: tasknet/charts/kratos/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-kratos
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.21.5
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "v0.8.0-alpha.3"
    app.kubernetes.io/managed-by: Helm
---
# Source: tasknet/charts/kratos/templates/configmap-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-kratos-config
  namespace: default
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.21.5
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "v0.8.0-alpha.3"
    app.kubernetes.io/managed-by: Helm
data:
  # Render the kratos config:
  "kratos.yaml": |
    courier:
      smtp: {}
    serve:
      admin:
        port: 4434
      public:
        port: 4433
  # Render the identity schemas to disk:
---
# Source: tasknet/charts/kratos/templates/service-admin.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-kratos-admin
  namespace: default
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.21.5
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "v0.8.0-alpha.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http-admin
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: kratos
    app.kubernetes.io/instance: test
---
# Source: tasknet/charts/kratos/templates/service-public.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-kratos-public
  namespace: default
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.21.5
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "v0.8.0-alpha.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http-public
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: kratos
    app.kubernetes.io/instance: test
---
# Source: tasknet/charts/kratos/templates/statefulset-svc.yaml
# Headless Service for StatefulSet. See https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#limitations 
# and https://kubernetes.io/docs/concepts/services-networking/service/#headless-services for details.
apiVersion: v1
kind: Service
metadata:
  name: test-kratos-courier
  namespace: default
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.21.5
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "v0.8.0-alpha.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  clusterIP: None
  ports:
    - port: 80
      targetPort: http-public
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: test-kratos-courier
    app.kubernetes.io/instance: test
---
# Source: tasknet/charts/kratos/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-kratos
  namespace: default
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.21.5
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "v0.8.0-alpha.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  progressDeadlineSeconds: 3600
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: kratos
      app.kubernetes.io/instance: test
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kratos
        helm.sh/chart: kratos-0.21.5
        app.kubernetes.io/instance: test
        app.kubernetes.io/version: "v0.8.0-alpha.3"
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      volumes:
        - name: kratos-config-volume
          configMap:
            name: test-kratos-config
      automountServiceAccountToken: true
      serviceAccountName: test-kratos
      containers:
        - name: kratos
          image: oryd/kratos:v0.8.0-alpha.3
          imagePullPolicy: IfNotPresent
          command: 
            - kratos
          args:
            - serve
            - all
            - --config
            - /etc/config/kratos.yaml
          volumeMounts:
            - name: kratos-config-volume
              mountPath: /etc/config
              readOnly: true
          env:
            - name: DSN
              valueFrom:
                secretKeyRef:
                  name: test-kratos
                  key: dsn
            - name: SECRETS_DEFAULT
              valueFrom:
                secretKeyRef:
                  name: test-kratos
                  key: secretsDefault
                  optional: true
            - name: SECRETS_COOKIE
              valueFrom:
                secretKeyRef:
                  name: test-kratos
                  key: secretsCookie
                  optional: true
            - name: SECRETS_CIPHER
              valueFrom:
                secretKeyRef:
                  name: test-kratos
                  key: secretsCipher
                  optional: true
            - name: COURIER_SMTP_CONNECTION_URI
              valueFrom:
                secretKeyRef:
                  name: test-kratos
                  key: smtpConnectionURI
          ports:
            - name: http-admin
              containerPort: 4434
              protocol: TCP
            - name: http-public
              containerPort: 4433
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health/alive
              port: http-admin
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /health/ready
              port: http-admin
            initialDelaySeconds: 30
            periodSeconds: 10
          resources:
            null
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 100
---
# Source: tasknet/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: tasknet
  name: tasknet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tasknet
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: tasknet
    spec:
      containers:
      - image: jeffas/tasknet:0.1.0
        name: tasknet
---
# Source: tasknet/charts/kratos/templates/statefulset-mail.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: test-kratos-courier
  namespace: default
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.21.5
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "v0.8.0-alpha.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: test-kratos-courier
      app.kubernetes.io/instance: test
  serviceName: test-kratos-courier
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: test-kratos-courier
        app.kubernetes.io/instance: test
    spec:
      containers:
        - name: test-kratos-courier
          image: oryd/kratos:v0.8.0-alpha.3
          imagePullPolicy: IfNotPresent
          args: [ "courier", "watch", "--config", "/etc/config/kratos.yaml" ]
          volumeMounts:
            - name: test-kratos-config-volume
              mountPath: /etc/config
              readOnly: true
          env:
            - name: LOG_FORMAT
              value: json
            - name: LOG_LEVEL
              value: trace
            - name: DSN
              valueFrom:
                secretKeyRef:
                  name: test-kratos
                  key: dsn
            - name: SECRETS_DEFAULT
              valueFrom:
                secretKeyRef:
                  name: test-kratos
                  key: secretsDefault
                  optional: true
            - name: SECRETS_COOKIE
              valueFrom:
                secretKeyRef:
                  name: test-kratos
                  key: secretsCookie
                  optional: true
            - name: SECRETS_CIPHER
              valueFrom:
                secretKeyRef:
                  name: test-kratos
                  key: secretsCipher
                  optional: true
            - name: COURIER_SMTP_CONNECTION_URI
              valueFrom:
                secretKeyRef:
                  name: test-kratos
                  key: smtpConnectionURI
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 100
      volumes:
        - name: test-kratos-config-volume
          configMap:
            name: test-kratos-config
---
# Source: tasknet/charts/kratos/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test-kratos
  namespace: default
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.21.5
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "v0.8.0-alpha.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "0"
    helm.sh/resource-policy: keep
type: Opaque
data:
  dsn: "cG9zdGdyZXM6Ly9mb286YmFyQHBnOjU0MzIvZGI="
  # Generate a random secret if the user doesn't give one. User given secret has priority
  secretsDefault: "InNvbWV0aGluZyAxIiwic29tZXRoaW5nIDIi"
  secretsCookie: "MGI1ZVd4MXQ4WFpmZzByVTFGTkp2ZFhINmtjMXB0UVA="
  secretsCipher: "aGZtTHdRenpSUGJDQlQxSmVOeHh4c0VSc1ZjYnlYSTI="
  smtpConnectionURI: "dGVzdA=="
---
# Source: tasknet/charts/kratos/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "test-kratos-test-connection"
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.21.5
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "v0.8.0-alpha.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['test-kratos-admin:80/health/ready']
  restartPolicy: Never
